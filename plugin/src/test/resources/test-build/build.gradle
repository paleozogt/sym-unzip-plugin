apply plugin: 'base'

def parentBuildDir= file("../../../../build")
buildDir= file("$parentBuildDir/tmp/test-build")

buildscript {
    repositories {
        flatDir ( dirs: "../../../../build/tmp/libs" )
        mavenCentral()
    }
    dependencies {
        classpath("org.paleozogt:symzip-plugin:")
        classpath 'org.apache.commons:commons-compress:1.13'
        classpath 'commons-io:commons-io:2.5'
    }
}
import org.paleozogt.gradle.zip.*;
import java.nio.file.Files;

ext.testDir    = "foo"
ext.testFile   = "$testDir/bar"
ext.testSymFile= "symfile"
ext.testSymDir = "symdir"
ext.testEmptyDir= "emptydir"
ext.testSymFileInDir= "$testDir/$testSymFile"
ext.testEmptyFileInDir= "$testDir/$testEmptyDir"
ext.inZipDir   = "test"

task makeTestData() {
    def testDataDir= file("$buildDir/testData")
    outputs.file testDataDir
    doLast {
        file("$testDataDir/$testDir").mkdirs()
        file("$testDataDir/$testEmptyDir").mkdirs()
        file("$testDataDir/$testEmptyFileInDir").mkdirs()
        file("$testDataDir/$testFile").write("echo 'this is a test'")
        file("$testDataDir/$testFile").setExecutable(true)
        file("$testDataDir/$testFile").setWritable(false)
        ant.symlink(link: file("$testDataDir/$testSymFile"), resource: testFile)
        ant.symlink(link: file("$testDataDir/$testSymDir") , resource: testDir)
        ant.symlink(link: file("$testDataDir/$testSymFileInDir"), resource: file(testFile).name)
    }
}

task cleanBuildDirectory(type: Delete) {
    delete("$buildDir")
}

makeTestData.dependsOn(cleanBuildDirectory)

task runSymZip(type:SymZip, dependsOn:makeTestData) {
    from file(makeTestData.outputs.files.first())
    archiveName "sym-zip.zip"
    into inZipDir
}

task runSymUnzip(type:SymUnzip, dependsOn:runSymZip) {
    from runSymZip.outputs.files.first()
    into file("$buildDir/unzip/sym-unzip")
}

task validateSymUnzip(dependsOn:runSymUnzip) {
    doLast {
        def testDataDir= makeTestData.outputs.files.first()
        def symUnzipDir= runSymUnzip.outputs.files.first()

        if (testDataDir.list() != file("$symUnzipDir/$inZipDir").list()) {
            throw new GradleException("folder contents doesn't match " + testDataDir.list() + ";\n" + file("$symUnzipDir/$inZipDir").list())
        }

        // make sure the file roundtripped
        def file1Contents= file("$testDataDir/$testFile").text
        def file2Contents= file("$symUnzipDir/$inZipDir/$testFile").text
        if (file1Contents != file2Contents) {
            throw new GradleException("file contents doesn't match")
        }

        // make sure the symbolic links roundtripped
        [ testSymFile, testSymDir, testSymFileInDir ].each { f ->
            def filePath = file("$symUnzipDir/$inZipDir/$f").toPath()
            if (!Files.isSymbolicLink(filePath)) {
                throw new GradleException("symbolic link not preserved")
            }
        }
    }
}

task runGradleZip(type:Zip, dependsOn:makeTestData) {
    from file(makeTestData.outputs.files.first())
    archiveName "gradle-zip.zip"
    into inZipDir
}

task runGradleUnzip(type:Copy, dependsOn:runGradleZip) {
    from zipTree(runGradleZip.outputs.files.first())
    into file("$buildDir/unzip/gradle-unzip")
}

task validateGradleUnzip(dependsOn:runGradleUnzip) {
    doLast {
        def testDataDir= makeTestData.outputs.files.first()
        def symUnzipDir= runGradleUnzip.outputs.files.first()

        if (testDataDir.list() != file("$symUnzipDir/$inZipDir").list()) {
            throw new GradleException("folder contents doesn't match")
        }

        // make sure the file roundtripped
        def file1Contents= file("$testDataDir/$testFile").text
        def file2Contents= file("$symUnzipDir/$inZipDir/$testFile").text
        if (file1Contents != file2Contents) {
            throw new GradleException("file contents doesn't match")
        }

        // make sure the symbolic links roundtripped
        [ testSymFile, testSymDir, testSymFileInDir ].each { f ->
            def filePath = file("$symUnzipDir/$inZipDir/$f").toPath()
            if (Files.isSymbolicLink(filePath)) {
                throw new GradleException("symbolic link unexpectedly preserved")
            }
        }
    }
}

task runSymUnzipOnNonZip(type:SymUnzip, dependsOn:makeTestData) {
    def testDataDir= makeTestData.outputs.files.first()
    from testDataDir
    into file("$buildDir/regular-copy")
}

task validate(dependsOn:[validateSymUnzip,validateGradleUnzip,runSymUnzipOnNonZip])

build.dependsOn(validate)
